using DataFrames,StatsBase

##零模型1
#  思想时设定基本的作用强度
#  约束条件为物种数量不变，Connectance不变
"""
`Null2(data::DataFrame,coinpvalue::Float64)`\n
Keep the degree distribution of the original node unchanged.\n
# Argument\n
* `data`:The adjacency matrix of a bipartite network.\n
* `coinpvalue`:Probability of true output(greater than 0 but less than 1).Please enter the value to one decimal place or two decimal places.\n
# Return\n
* `nulldata`:Dataframe generated by null model 2.\n
# Example\n
using BipartiteNull,DataFrames;\n
data=ExampleData(7);\n
print(data);\n
nulldata=Null2(data,0.5)
"""
function Null2(data::DataFrame,coinpvalue::Float64)
#  将数据转换为矩阵
  matrix_null=Matrix(data[:,Not(1)])
#  获取矩阵尺寸
  a,b=size(matrix_null)
#  获取连接可能数量
  a_link_number=a*(a-1)/2
  b_link_number=b*(b-1)/2
  unit_22=a_link_number*b_link_number
#  走遍2*2矩阵，分类计算单元数量
  for i1 in 1:a-1
  for i2 in i1+1:a
    for j1 in 1:b-1
    for j2 in j1+1:b
      if matrix_null[[i1,i2],[j1,j2]]==[1 0;0 1]
        if Coin(coinpvalue)
          matrix_null[[i1,i2],[j1,j2]]=[0 1;1 0]
        end
      elseif matrix_null[[i1,i2],[j1,j2]]==[0 1;1 0]
        if Coin(coinpvalue)
          matrix_null[[i1,i2],[j1,j2]]=[1 0;0 1]
        end
      end
    end
    end
  end
  end
#  转化为数据框
  nulldata=hcat(DataFrame(AdjacencyMatrix=data[:,1]),DataFrame(matrix_null,:auto))
  rename!(nulldata,propertynames(data))
#  返回数据
  return(nulldata)
end